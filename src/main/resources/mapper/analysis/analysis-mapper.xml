<?xml version="1.0" encoding="UTF-8"?>
<!--
SEEK
Copyright (C) 2025 placelink

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program. If not, see <https://www.gnu.org/licenses/>.

=========================================================================

상업적 이용 또는 AGPL-3.0의 공개 의무를 면제받기
위해서는, placelink로부터 별도의 상업용 라이선스(Commercial License)를 구매해야 합니다.
For commercial use or to obtain an exemption from the AGPL-3.0 license
requirements, please purchase a commercial license from placelink.
*** 문의처: help@placelink.shop (README.md 참조)
-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="biz.placelink.seek.analysis.service.AnalysisMapper">

    <sql id="sqlAnalysis">
		SELECT
			sa.ANALYSIS_ID,
			sa.ANALYSIS_MODE_CCD,
			sa.ANALYSIS_STATUS_CCD,
			sa.ANALYSIS_MODEL,
			sa.ANALYSIS_DATA_HASH,
			sa.ANALYSIS_RESULT_ID,
			sa.ANALYSIS_START_DT,
			sa.ANALYSIS_END_DT,
			sa.ANALYSIS_TIME,
			spa.REQUEST_ID,
			spa.COUNTRY_CCD,
			spa.URL,
			spa.HEADER,
			spa.QUERY_STRING,
			spa.BODY,
			spa.FILE_ID,
			sda.TARGET_INFORMATION,
			sda.CONTENT,
            sfa.DETECTION_FILE_ID,
			sfa.SIGNED_FILE_ID,
			COALESCE(sfa.FILE_COUNT, 0) AS FILE_COUNT,
			COALESCE(sfa.TOTAL_FILE_SIZE, 0) AS TOTAL_FILE_SIZE,
			sfa.REQUESTER_UID,
			sa.CREATE_DT
		FROM SEEK_ANALYSIS sa
            LEFT JOIN SEEK_PROXY_ANALYSIS spa
                ON sa.ANALYSIS_ID = spa.ANALYSIS_ID
                AND COALESCE(sa.ANALYSIS_MODE_CCD, '') LIKE 'PROXY_%'
            LEFT JOIN SEEK_DATABASE_ANALYSIS sda
                ON sa.ANALYSIS_ID = sda.ANALYSIS_ID
                AND COALESCE(sa.ANALYSIS_MODE_CCD, '') = 'DATABASE'
            LEFT JOIN SEEK_FILE_ANALYSIS sfa
                ON sa.ANALYSIS_ID = sfa.ANALYSIS_ID
                AND COALESCE(sa.ANALYSIS_MODE_CCD, '') = 'DETECTION_FILE'
    </sql>

    <select id="selectAnalysisHistListToExecuted" resultType="analysisDetailVO">
		/** selectAnalysisHistListToExecuted : 실행하려는 분석 목록을 조회한다. */
		WITH PROCESSING AS (
			/* 현재 진행중인 분석 요청을 포함하여 분석 서버에 요청할 수 있는 최대(스레드) 수 만큼 조회 */
			SELECT COALESCE(#{maxCount} - COUNT(1), 0) AS SEL_COUNT
			FROM SEEK_ANALYSIS
			WHERE ANALYSIS_STATUS_CCD = 'PROCESSING'
		)
		<include refid="sqlAnalysis"/>
		WHERE sa.ANALYSIS_STATUS_CCD = 'WAIT'
		ORDER BY sa.CREATE_DT
		LIMIT (
			SELECT
				CASE
					WHEN 0 > SEL_COUNT THEN 0
					ELSE SEL_COUNT
				END
			FROM PROCESSING
		)
    </select>

    <select id="selectProcessingAnalysisList" resultType="analysisDetailVO">
		/** selectProcessingAnalysisList : 실행중인 분석 정보 목록을 조회한다. */
		<include refid="sqlAnalysis"/>
		WHERE sa.ANALYSIS_STATUS_CCD = 'PROCESSING'
            AND sa.ANALYSIS_START_DT >= NOW() - #{searchPeriodMinutes} * INTERVAL  '1 month'
		ORDER BY sa.CREATE_DT
    </select>

    <insert id="insertAnalysis" parameterType="analysisVO">
		/** insertAnalysis : 분석 정보를 등록한다. */
        <selectKey keyProperty="createDtStr" resultType="string" order="BEFORE">
            SELECT TO_CHAR(NOW(), 'YYYYMMDDHH24MI') AS CREATE_DT_STR
        </selectKey>
		INSERT INTO SEEK_ANALYSIS (
			ANALYSIS_ID,
			ANALYSIS_MODE_CCD,
			ANALYSIS_STATUS_CCD,
			ANALYSIS_MODEL,
			REQUEST_ID,
			CLIENT_IP,
			USER_ID,
			CREATE_DT,
			MODIFY_DT
		) VALUES (
			#{analysisId},
			#{analysisModeCcd},
			#{analysisStatusCcd},
			#{analysisModel},
			#{requestId},
			#{clientIp},
            <choose>
                <when test='userId != null and userId != ""'>
                    #{userId}
                </when>
                <when test='clientIp != null and clientIp != ""'>
                    (SELECT USER_ID FROM SEEK_AGENT WHERE CLIENT_IP = #{clientIp} LIMIT 1)
                </when>
                <otherwise>
                    NULL
                </otherwise>
            </choose>,
			NOW(),
			NOW()
		)
    </insert>

    <update id="updateAnalysis" parameterType="analysisVO">
		/** updateAnalysis : 분석 정보를 수정한다. */
		UPDATE SEEK_ANALYSIS
		SET
			ANALYSIS_STATUS_CCD = COALESCE(#{analysisStatusCcd}, ANALYSIS_STATUS_CCD),
            ANALYSIS_MODEL = COALESCE(#{analysisModel}, ANALYSIS_MODEL),
            ANALYSIS_DATA_HASH = COALESCE(#{analysisDataHash}, ANALYSIS_DATA_HASH),
            ANALYSIS_RESULT_ID = COALESCE(#{analysisResultId}, ANALYSIS_RESULT_ID),
        <choose>
            <when test='analysisStatusCcd eq "PROCESSING"'>
					ANALYSIS_START_DT = CASE
						WHEN ANALYSIS_START_DT IS NULL THEN NOW()
						ELSE ANALYSIS_START_DT
					END,
            </when>
            <when test='analysisStatusCcd eq "COMPLETE" or analysisStatusCcd eq "ERROR"'>
					ANALYSIS_END_DT = CASE
						WHEN ANALYSIS_END_DT IS NULL THEN NOW()
						ELSE ANALYSIS_END_DT
					END,
            </when>
        </choose>
			ANALYSIS_TIME = COALESCE(#{analysisTime}, ANALYSIS_TIME),
            MODIFY_DT = NOW()
		WHERE ANALYSIS_ID = #{analysisId}
    </update>

    <update id="updateAnalysisTimeoutError">
		/** updateAnalysisTimeoutError : 실행 시간이 초과된 분석을 오류 처리한다. */
		UPDATE SEEK_ANALYSIS
		SET
			ANALYSIS_STATUS_CCD = 'ERROR',
			ANALYSIS_END_DT = NOW()
		WHERE ANALYSIS_STATUS_CCD = 'PROCESSING'
			AND NOW() - MAKE_INTERVAL(MINS => #{maxMinutes}) > ANALYSIS_START_DT
    </update>

    <select id="selectRecentRealtimeAnalysisStatus" resultType="integer">
        /** selectRecentRealtimeAnalysisStatus : 최근 실시간 분석 현황을 조회한다. */
        SELECT
            CREATE_DT_STR,
            COUNT(1) AS TOTAL_COUNT,
            SUM(COMPLETE_COUNT) AS COMPLETE_COUNT
        FROM (
            SELECT
                CASE WHEN ANALYSIS_STATUS_CCD = 'COMPLETE' THEN 1 ELSE 0 END AS COMPLETE_COUNT,
                TO_CHAR(sa.CREATE_DT, 'YYYYMMDDHH24MI') AS CREATE_DT_STR
            FROM SEEK_ANALYSIS sa
            WHERE sa.CREATE_DT >= NOW() - INTERVAL '30 MINUTES'
        )
        GROUP BY CREATE_DT_STR
        ORDER BY CREATE_DT_STR
    </select>

    <select id="selectLastCompleteDtStr" resultType="string">
        /** selectLastCompleteDtStr : 최근 완료된 분석의 날짜를 조회한다. */
        SELECT TO_CHAR(MAX(CREATE_DT), 'YYYYMMDDHH24MI')
        FROM SEEK_ANALYSIS
        WHERE ANALYSIS_STATUS_CCD = 'COMPLETE'
    </select>

</mapper>
