<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="biz.placelink.seek.analysis.service.SensitiveInformationUnmaskHistMapper">

    <insert id="insertSensitiveInformationUnmaskHist" parameterType="sensitiveInformationUnmaskHistVO">
		/** insertSensitiveInformationUnmaskHist : 민감 정보 언마스크 이력을 등록한다. */
		INSERT INTO SEEK_SENSITIVE_INFORMATION_UNMASK_HIST (
			REQUEST_ID,
			CLIENT_IP,
			USER_ID,
			SENSITIVE_INFORMATION_COUNT,
			CREATE_DT
		) VALUES (
            #{requestId},
            #{clientIp},
            <choose>
                <when test='userId != null and userId != ""'>
                    #{userId}
                </when>
                <when test='clientIp != null and clientIp != ""'>
                    (SELECT USER_ID FROM SEEK_AGENT WHERE CLIENT_IP = #{clientIp} LIMIT 1)
                </when>
                <otherwise>
                    NULL
                </otherwise>
            </choose>,
            #{sensitiveInformationCount},
            NOW()
        )
    </insert>

    <insert id="insertSensitiveInformationUnmaskInfo">
		/** insertSensitiveInformationUnmaskInfo : 민감 정보 언마스크 정보를 등록한다. */
		INSERT INTO SEEK_SENSITIVE_INFORMATION_UNMASK_INFO (
			REQUEST_ID,
			SENSITIVE_INFORMATION_ID
		) VALUES
        <foreach collection="sensitiveInformationList" item="item" separator=",">
			(
				#{requestId},
				#{item.sensitiveInformationId}
			)
        </foreach>
		ON CONFLICT (REQUEST_ID, SENSITIVE_INFORMATION_ID)
		DO NOTHING
    </insert>

    <sql id="sqlSensitiveInformationUnmaskHist">
        WITH SENSITIVE_INFORMATION_UNMASK_HIST AS (
            SELECT
                USER_ID,
                SENSITIVE_INFORMATION_COUNT,
                CASE
                    WHEN CREATE_DT::time >= '09:00:00' AND '18:00:00' >= CREATE_DT::time THEN 'NORMAL'
                    ELSE 'ABNORMAL'
                END AS WORKING_HOUR_STATUS_CCD,
                CREATE_DT
            FROM SEEK_SENSITIVE_INFORMATION_UNMASK_HIST
            <where>
                <if test='searchStartDate neq null'>
                    AND CREATE_DT >= #{searchStartDate}
                </if>
                <if test='searchEndDate neq null'>
                    AND #{searchEndDateNextDay} > CREATE_DT
                </if>
            </where>
        )
        SELECT
            USER_ID,
            COALESCE(SUM(COALESCE(SENSITIVE_INFORMATION_COUNT, 0)), 0) AS TOTAL_SENSITIVE_INFORMATION_COUNT,
            COALESCE(SUM(CASE WHEN WORKING_HOUR_STATUS_CCD = 'NORMAL' THEN COALESCE(SENSITIVE_INFORMATION_COUNT, 0) ELSE 0 END), 0) AS NORMAL_SENSITIVE_INFORMATION_COUNT,
            COALESCE(SUM(CASE WHEN WORKING_HOUR_STATUS_CCD = 'ABNORMAL' THEN COALESCE(SENSITIVE_INFORMATION_COUNT, 0) ELSE 0 END), 0) AS ABNORMAL_SENSITIVE_INFORMATION_COUNT,
            COUNT(1) AS TOTAL_REQUEST_COUNT,
            COALESCE(SUM(CASE WHEN WORKING_HOUR_STATUS_CCD = 'NORMAL' THEN 1 ELSE 0 END), 0) AS NORMAL_REQUEST_COUNT,
            COALESCE(SUM(CASE WHEN WORKING_HOUR_STATUS_CCD = 'ABNORMAL' THEN 1 ELSE 0 END), 0) AS ABNORMAL_REQUEST_COUNT,
            MAX(CREATE_DT) AS LAST_REQUEST_DT
        FROM SENSITIVE_INFORMATION_UNMASK_HIST
        GROUP BY USER_ID
    </sql>

    <select id="selectSensitiveInformationUnmaskHistListStatus" parameterType="searchVO" resultType="sensitiveInformationUnmaskHistVO">
        /** selectSensitiveInformationUnmaskHistListStatus : 민감 정보 언마스크 이력 목록 현황을 조회한다. */
        SELECT
            COALESCE(SUM(COALESCE(TOTAL_SENSITIVE_INFORMATION_COUNT, 0)), 0) as TOTAL_SENSITIVE_INFORMATION_COUNT,
            COALESCE(SUM(COALESCE(NORMAL_SENSITIVE_INFORMATION_COUNT, 0)), 0) as NORMAL_SENSITIVE_INFORMATION_COUNT,
            COALESCE(SUM(COALESCE(ABNORMAL_SENSITIVE_INFORMATION_COUNT, 0)), 0) as ABNORMAL_SENSITIVE_INFORMATION_COUNT,
            COALESCE(SUM(COALESCE(TOTAL_REQUEST_COUNT, 0)), 0) as TOTAL_REQUEST_COUNT,
            COALESCE(SUM(COALESCE(NORMAL_REQUEST_COUNT, 0)), 0) as NORMAL_REQUEST_COUNT,
            COALESCE(SUM(COALESCE(ABNORMAL_REQUEST_COUNT, 0)), 0) as ABNORMAL_REQUEST_COUNT
        FROM (
            <include refid="sqlSensitiveInformationUnmaskHist"/>
        )
    </select>

    <select id="selectSensitiveInformationUnmaskHistList" parameterType="searchVO" resultType="sensitiveInformationUnmaskHistVO">
        /** selectSensitiveInformationUnmaskHistList : 민감 정보 언마스크 이력 목록을 조회한다. */
        <include refid="common.sql.paging_header"/>
        <include refid="sqlSensitiveInformationUnmaskHist"/>
        <include refid="common.sql.paging_footer"/>
    </select>

    <select id="selectSensitiveInformationUnmaskHistListCount" parameterType="searchVO" resultType="integer">
        /** selectSensitiveInformationUnmaskHistListCount : 민감 정보 언마스크 이력 목록 개수를 조회한다. */
        SELECT COUNT(1)
        FROM (
            <include refid="sqlSensitiveInformationUnmaskHist"/>
        )
    </select>

</mapper>
