<?xml version="1.0" encoding="UTF-8"?>
<!--
SEEK
Copyright (C) 2025 placelink

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU Affero General Public License for more details.

You should have received a copy of the GNU Affero General Public License
along with this program. If not, see <https://www.gnu.org/licenses/>.
-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="biz.placelink.seek.analysis.service.AnalysisResultMapper">

    <select id="selectAnalysisResultCountByHash" resultType="integer">
		/** selectAnalysisResultCountByHash : 해시 값(분석 결과 ID)으로 동일 분석 결과가 있는지 확인한다. */
		SELECT COUNT(1)
		FROM SEEK_ANALYSIS_RESULT
		WHERE ANALYSIS_RESULT_ID = #{analysisResultId}
    </select>

    <select id="selectAnalysisResult" resultType="analysisResultVO">
		/** selectAnalysisResult : 분석 결과를 조회한다. */
		SELECT
            sa.ANALYSIS_ID,
            sa.ANALYSIS_MODE_CCD,
            sar.ANALYSIS_RESULT_ID,
            sar.ANALYZED_CONTENT,
            sar.MAX_DETECTION_TYPE_CCD,
            COALESCE(sar.TOTAL_DETECTION_COUNT, 0) AS TOTAL_DETECTION_COUNT,
            spa.COUNTRY_CCD,
            sda.TARGET_INFORMATION,
            sda.CONTENT,
            sa.CREATE_DT
		FROM SEEK_ANALYSIS sa
            JOIN SEEK_ANALYSIS_RESULT sar
                ON sar.ANALYSIS_RESULT_ID = #{analysisResultId}
            LEFT JOIN SEEK_PROXY_ANALYSIS spa
                ON sa.ANALYSIS_ID = spa.ANALYSIS_ID
                AND COALESCE(sa.ANALYSIS_MODE_CCD, '') != 'DATABASE'
            LEFT JOIN SEEK_DATABASE_ANALYSIS sda
                ON sa.ANALYSIS_ID = sda.ANALYSIS_ID
                AND COALESCE(sa.ANALYSIS_MODE_CCD, '') = 'DATABASE'
		WHERE sa.ANALYSIS_ID = #{analysisId}
    </select>

    <insert id="insertAnalysisResult">
        /** insertAnalysisResult : 분석 결과를 등록한다. */
        INSERT INTO SEEK_ANALYSIS_RESULT (
            ANALYSIS_RESULT_ID,
            ANALYSIS_RAW_DATA,
            ANALYZED_CONTENT,
            MAX_DETECTION_TYPE_CCD,
            TOTAL_DETECTION_COUNT,
            CREATE_DT
        ) VALUES (
            #{analysisResultId},
            #{analysisRawData},
            #{analyzedContent},
            #{maxDetectionTypeCcd},
            #{totalDetectionCount},
            NOW()
        ) ON CONFLICT (ANALYSIS_RESULT_ID) DO NOTHING
    </insert>

    <insert id="insertAnalysisDetectionList">
		/** insertAnalysisDetectionList : 분석 검출 목록을 등록한다. */
        INSERT INTO SEEK_ANALYSIS_DETECTIONS (
            ANALYSIS_RESULT_ID,
            DETECTION_TYPE_CCD,
            DETECTION_COUNT
        ) VALUES
        <foreach collection="analysisDetectionList" item="analysisDetection" separator=",">
            (
                #{analysisDetection.analysisResultId},
                #{analysisDetection.detectionTypeCcd},
                #{analysisDetection.detectionCount}
            )
        </foreach>
        ON CONFLICT (ANALYSIS_RESULT_ID, DETECTION_TYPE_CCD)
        DO NOTHING
    </insert>

    <select id="selectAnalysisDetectionList">
        /** selectAnalysisDetectionList : 분석 검출 목록을 조회한다. */
        SELECT
            ANALYSIS_RESULT_ID,
			DETECTION_TYPE_CCD,
			DETECTION_COUNT
        FROM SEEK_ANALYSIS_DETECTIONS
        WHERE ANALYSIS_RESULT_ID = #{analysisResultId}
    </select>

</mapper>
