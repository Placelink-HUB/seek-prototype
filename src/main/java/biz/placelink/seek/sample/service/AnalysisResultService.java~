package biz.placelink.aicas.analysis.service;

import biz.placelink.aicas.analysis.vo.*;
import biz.placelink.aicas.com.constants.Constants;
import biz.placelink.aicas.com.util.PaginationInfo;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import kr.s2.ext.util.S2Util;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.List;

/**
 * <pre>
 * << 개정이력(Modification Information) >>
 *
 *  수정일                수정자        수정내용
 *
 *  ------------       --------    ---------------------------
 *
 *  2025. 02. 05.      s2          최초생성
 * </pre>
 */
@Service
public class AnalysisResultService {

    private final AnalysisResultMapper analysisResultMapper;
    private final AnalysisResultDiseaseDetectionService analysisResultDiseaseDetectionService;
    private final AnalysisResultItemService analysisResultItemService;

    public AnalysisResultService(AnalysisResultMapper analysisResultMapper, AnalysisResultDiseaseDetectionService analysisResultDiseaseDetectionService, AnalysisResultItemService analysisResultItemService) {
        this.analysisResultMapper = analysisResultMapper;
        this.analysisResultDiseaseDetectionService = analysisResultDiseaseDetectionService;
        this.analysisResultItemService = analysisResultItemService;
    }

    /**
     * 분석 결과 목록을 페이지 처리하여 조회한다.
     *
     * @param searchVO 조회 조건
     * @return 분석 결과 목록
     */
    public PaginationInfo selectAnalysisResultListWithPagination(SchAnalysisVO searchVO) {
        List<AnalysisResultVO> list = analysisResultMapper.selectAnalysisResultList(searchVO);
        int count = analysisResultMapper.selectAnalysisResultListCount(searchVO);
        return new PaginationInfo(searchVO, list, count);
    }

    /**
     * 분석 결과 현황을 조회한다.
     *
     * @param searchVO 조회 조건
     * @return 분석 결과 현황
     */
    public AnalysisResultVO selectAnalysisResultInfo(SchAnalysisVO searchVO) {
        return analysisResultMapper.selectAnalysisResultInfo(searchVO);
    }

    /**
     * 분석 결과 조회한다.
     *
     * @param analysisId       분석 ID
     * @param analysisResultSn 분석 결과 순번
     * @param userUid          사용자 식별자
     * @return 분석 결과
     */
    public AnalysisResultVO selectAnalysisResult(String analysisId, Integer analysisResultSn, String userUid) {
        return analysisResultMapper.selectAnalysisResult(analysisId, analysisResultSn, userUid);
    }

    /**
     * 분석 결과 상세를 조회한다. (하위 항목 포함)
     *
     * @param analysisId       분석 ID
     * @param analysisResultSn 분석 결과 순번
     * @param userUid          사용자 식별자
     * @return 분석 결과
     */
    public AnalysisResultVO selectAnalysisResultDetail(String analysisId, Integer analysisResultSn, String userUid) {
        AnalysisResultVO analysisResult = analysisResultMapper.selectAnalysisResult(analysisId, analysisResultSn, userUid);
        if (analysisResult != null) {
            analysisResult.setAnalysisResultDiseaseDetectionList(analysisResultDiseaseDetectionService.selectAnalysisResultDiseaseDetectionList(analysisResult.getAnalysisId(), analysisResult.getAnalysisResultSn()));
            analysisResult.setAnalysisResultItemList(analysisResultItemService.selectAnalysisResultItemList(analysisResult.getAnalysisId(), analysisResult.getAnalysisResultSn()));
        }
        return analysisResult;
    }

    /**
     * 분석 결과 데이터를 등록한다.
     *
     * @param paramVO 분석 결과
     * @return 등록 개수
     */
    @Transactional(propagation = Propagation.REQUIRES_NEW)
    public int insertAnalysisResultDataWithNewTransaction(AnalysisResultVO paramVO) {
        analysisResultMapper.updateAnalysisResultExclusion(paramVO.getAnalysisId(), Constants.SYSTEM_UID);
        paramVO.setCreateUid(Constants.SYSTEM_UID);
        return analysisResultMapper.insertAnalysisResultData(paramVO);
    }

    /**
     * 분석 요청 결과를 수정한다.
     *
     * @param paramVO 분석 결과
     * @return 수정 개수
     */
    public int updateAnalysisResult(AnalysisResultVO paramVO) {
        paramVO.setModifyUid(Constants.SYSTEM_UID);
        return analysisResultMapper.updateAnalysisResult(paramVO);
    }

    /**
     * 분석 오류를 등록한다.
     *
     * @param analysisId   분석 ID
     * @param errorMessage 오류 메시지
     */
    @Transactional(propagation = Propagation.REQUIRES_NEW)
    public void insertAnalysisErrorWithNewTransaction(String analysisId, String errorMessage) {
        analysisResultMapper.updateAnalysisErrorExclusion(analysisId);
        AnalysisErrorVO paramVO = new AnalysisErrorVO();
        paramVO.setAnalysisId(analysisId);
        paramVO.setErrorMessage(errorMessage);
        analysisResultMapper.insertAnalysisError(paramVO);
    }

    public AnalysisResultVer2VO convertAnalysisResultVer2(String analysisData) {
        AnalysisResultVer2VO analysisResultVer2 = new AnalysisResultVer2VO();
        if (S2Util.isNotEmpty(analysisData)) {
            JsonNode jsonNode;
            try {
                ObjectMapper objectMapper = new ObjectMapper();
                jsonNode = objectMapper.readTree(analysisData);
            } catch (JsonProcessingException e) {
                jsonNode = null;
            }

            if (jsonNode != null) {
                String[] classifyCancerStatusArray = jsonNode.get("classify_cancer_status").asText("").split("\\|");
                for (int idx = 0; idx < classifyCancerStatusArray.length; idx++) {
                    String classifyCancerStatus = classifyCancerStatusArray[idx];
                    classifyCancerStatusArray[idx] = classifyCancerStatus.trim().split("\\s")[1];
                }

                analysisResultVer2.setClassifyCancerLevelResultArray(jsonNode.get("classify_cancer_level_result").asText("").split("\\|"));
                analysisResultVer2.setClassifyCancerStatusArray(classifyCancerStatusArray);
                analysisResultVer2.setClassifyCancerResult(jsonNode.get("classify_cancer_result").asText(""));
                analysisResultVer2.setFinalTopDesc(jsonNode.get("final_top_desc").asText(""));
                analysisResultVer2.setFinalKrCancerResult(jsonNode.get("final_kr_cancer_result").asText(""));
                analysisResultVer2.setFinalDownDesc(jsonNode.get("final_down_desc").asText(""));
                analysisResultVer2.setCancerStatusListArray(jsonNode.get("cancer_status_list").asText("").split("\\|"));

                List<AnalysisResultDiseaseDetectionVer2VO> analysisResultDiseaseDetectionVer2List = new ArrayList<>();
                analysisResultVer2.setAnalysisResultDiseaseDetectionVer2List(analysisResultDiseaseDetectionVer2List);

                // 간암
                AnalysisResultDiseaseDetectionVer2VO detectionLiver = new AnalysisResultDiseaseDetectionVer2VO();
                detectionLiver.setDiseaseCd(Constants.DISEASE_CD_LIVER);
                detectionLiver.setDiseaseCdNm("간암");
                detectionLiver.setDetailDesc1(jsonNode.get("liver_detail_desc1").asText(""));
                detectionLiver.setDetailDesc2(jsonNode.get("liver_detail_desc2").asText(""));
                detectionLiver.setDetailDescLevel(jsonNode.get("liver_detail_desc_level").asText(""));
                detectionLiver.setDetailDescScore(jsonNode.get("liver_detail_desc_score").asText(""));
                detectionLiver.setDetailDescLevelInfo(jsonNode.get("liver_detail_desc_level_info").asText(""));
                detectionLiver.setDetailCompareDesc1(jsonNode.get("liver_detail_compare_desc1").asText(""));
                detectionLiver.setDetailCompareDescDistance(jsonNode.get("liver_detail_compare_desc_distance").asText(""));
                detectionLiver.setDistanceLevelName(jsonNode.get("liver_distance_level_name").asText(""));
                detectionLiver.setFileSortSn1(2101);
                detectionLiver.setFileSortSn2(2102);
                analysisResultDiseaseDetectionVer2List.add(detectionLiver);

                // 갑상선암
                AnalysisResultDiseaseDetectionVer2VO detectionThyroid = new AnalysisResultDiseaseDetectionVer2VO();
                detectionLiver.setDiseaseCd(Constants.DISEASE_CD_THYROID);
                detectionThyroid.setDiseaseCdNm("갑상선암");
                detectionThyroid.setDetailDesc1(jsonNode.get("thyroid_detail_desc1").asText(""));
                detectionThyroid.setDetailDesc2(jsonNode.get("thyroid_detail_desc2").asText(""));
                detectionThyroid.setDetailDescLevel(jsonNode.get("thyroid_detail_desc_level").asText(""));
                detectionThyroid.setDetailDescScore(jsonNode.get("thyroid_detail_desc_score").asText(""));
                detectionThyroid.setDetailDescLevelInfo(jsonNode.get("thyroid_detail_desc_level_info").asText(""));
                detectionThyroid.setDetailCompareDesc1(jsonNode.get("thyroid_detail_compare_desc1").asText(""));
                detectionThyroid.setDetailCompareDescDistance(jsonNode.get("thyroid_detail_compare_desc_distance").asText(""));
                detectionThyroid.setDistanceLevelName(jsonNode.get("thyroid_distance_level_name").asText(""));
                detectionThyroid.setFileSortSn1(2201);
                detectionThyroid.setFileSortSn2(2202);
                analysisResultDiseaseDetectionVer2List.add(detectionThyroid);

                // 대장암
                AnalysisResultDiseaseDetectionVer2VO detectionColorectal = new AnalysisResultDiseaseDetectionVer2VO();
                detectionLiver.setDiseaseCd(Constants.DISEASE_CD_COLORECTAL);
                detectionColorectal.setDiseaseCdNm("대장암");
                detectionColorectal.setDetailDesc1(jsonNode.get("colorectal_detail_desc1").asText(""));
                detectionColorectal.setDetailDesc2(jsonNode.get("colorectal_detail_desc2").asText(""));
                detectionColorectal.setDetailDescLevel(jsonNode.get("colorectal_detail_desc_level").asText(""));
                detectionColorectal.setDetailDescScore(jsonNode.get("colorectal_detail_desc_score").asText(""));
                detectionColorectal.setDetailDescLevelInfo(jsonNode.get("colorectal_detail_desc_level_info").asText(""));
                detectionColorectal.setDetailCompareDesc1(jsonNode.get("colorectal_detail_compare_desc1").asText(""));
                detectionColorectal.setDetailCompareDescDistance(jsonNode.get("colorectal_detail_compare_desc_distance").asText(""));
                detectionColorectal.setDistanceLevelName(jsonNode.get("colorectal_distance_level_name").asText(""));
                detectionColorectal.setFileSortSn1(2301);
                detectionColorectal.setFileSortSn2(2302);
                analysisResultDiseaseDetectionVer2List.add(detectionColorectal);

                // 신장암
                AnalysisResultDiseaseDetectionVer2VO detectionKidney = new AnalysisResultDiseaseDetectionVer2VO();
                detectionLiver.setDiseaseCd(Constants.DISEASE_CD_KIDNEY);
                detectionKidney.setDiseaseCdNm("신장암");
                detectionKidney.setDetailDesc1(jsonNode.get("kidney_detail_desc1").asText(""));
                detectionKidney.setDetailDesc2(jsonNode.get("kidney_detail_desc2").asText(""));
                detectionKidney.setDetailDescLevel(jsonNode.get("kidney_detail_desc_level").asText(""));
                detectionKidney.setDetailDescScore(jsonNode.get("kidney_detail_desc_score").asText(""));
                detectionKidney.setDetailDescLevelInfo(jsonNode.get("kidney_detail_desc_level_info").asText(""));
                detectionKidney.setDetailCompareDesc1(jsonNode.get("kidney_detail_compare_desc1").asText(""));
                detectionKidney.setDetailCompareDescDistance(jsonNode.get("kidney_detail_compare_desc_distance").asText(""));
                detectionKidney.setDistanceLevelName(jsonNode.get("kidney_distance_level_name").asText(""));
                detectionKidney.setFileSortSn1(2401);
                detectionKidney.setFileSortSn2(2402);
                analysisResultDiseaseDetectionVer2List.add(detectionKidney);

                // 위암
                AnalysisResultDiseaseDetectionVer2VO detectionStomach = new AnalysisResultDiseaseDetectionVer2VO();
                detectionLiver.setDiseaseCd(Constants.DISEASE_CD_STOMACH);
                detectionStomach.setDiseaseCdNm("위암");
                detectionStomach.setDetailDesc1(jsonNode.get("stomach_detail_desc1").asText(""));
                detectionStomach.setDetailDesc2(jsonNode.get("stomach_detail_desc2").asText(""));
                detectionStomach.setDetailDescLevel(jsonNode.get("stomach_detail_desc_level").asText(""));
                detectionStomach.setDetailDescScore(jsonNode.get("stomach_detail_desc_score").asText(""));
                detectionStomach.setDetailDescLevelInfo(jsonNode.get("stomach_detail_desc_level_info").asText(""));
                detectionStomach.setDetailCompareDesc1(jsonNode.get("stomach_detail_compare_desc1").asText(""));
                detectionStomach.setDetailCompareDescDistance(jsonNode.get("stomach_detail_compare_desc_distance").asText(""));
                detectionStomach.setDistanceLevelName(jsonNode.get("stomach_distance_level_name").asText(""));
                detectionStomach.setFileSortSn1(2501);
                detectionStomach.setFileSortSn2(2502);
                analysisResultDiseaseDetectionVer2List.add(detectionStomach);

                // 유방암
                AnalysisResultDiseaseDetectionVer2VO detectionBreast = new AnalysisResultDiseaseDetectionVer2VO();
                detectionLiver.setDiseaseCd(Constants.DISEASE_CD_BREAST);
                detectionBreast.setDiseaseCdNm("유방암");
                detectionBreast.setDetailDesc1(jsonNode.get("breast_detail_desc1").asText(""));
                detectionBreast.setDetailDesc2(jsonNode.get("breast_detail_desc2").asText(""));
                detectionBreast.setDetailDescLevel(jsonNode.get("breast_detail_desc_level").asText(""));
                detectionBreast.setDetailDescScore(jsonNode.get("breast_detail_desc_score").asText(""));
                detectionBreast.setDetailDescLevelInfo(jsonNode.get("breast_detail_desc_level_info").asText(""));
                detectionBreast.setDetailCompareDesc1(jsonNode.get("breast_detail_compare_desc1").asText(""));
                detectionBreast.setDetailCompareDescDistance(jsonNode.get("breast_detail_compare_desc_distance").asText(""));
                detectionBreast.setDistanceLevelName(jsonNode.get("breast_distance_level_name").asText(""));
                detectionBreast.setFileSortSn1(2601);
                detectionBreast.setFileSortSn2(2602);
                analysisResultDiseaseDetectionVer2List.add(detectionBreast);

                // 전립선암
                AnalysisResultDiseaseDetectionVer2VO detectionProstate = new AnalysisResultDiseaseDetectionVer2VO();
                detectionLiver.setDiseaseCd(Constants.DISEASE_CD_PROSTATE);
                detectionProstate.setDiseaseCdNm("전립선암");
                detectionProstate.setDetailDesc1(jsonNode.get("prostate_detail_desc1").asText(""));
                detectionProstate.setDetailDesc2(jsonNode.get("prostate_detail_desc2").asText(""));
                detectionProstate.setDetailDescLevel(jsonNode.get("prostate_detail_desc_level").asText(""));
                detectionProstate.setDetailDescScore(jsonNode.get("prostate_detail_desc_score").asText(""));
                detectionProstate.setDetailDescLevelInfo(jsonNode.get("prostate_detail_desc_level_info").asText(""));
                detectionProstate.setDetailCompareDesc1(jsonNode.get("prostate_detail_compare_desc1").asText(""));
                detectionProstate.setDetailCompareDescDistance(jsonNode.get("prostate_detail_compare_desc_distance").asText(""));
                detectionProstate.setDistanceLevelName(jsonNode.get("prostate_distance_level_name").asText(""));
                detectionProstate.setFileSortSn1(2701);
                detectionProstate.setFileSortSn2(2702);
                analysisResultDiseaseDetectionVer2List.add(detectionProstate);

                // 폐암
                AnalysisResultDiseaseDetectionVer2VO detectionLungluad = new AnalysisResultDiseaseDetectionVer2VO();
                detectionLiver.setDiseaseCd(Constants.DISEASE_CD_LUNGLUAD);
                detectionLungluad.setDiseaseCdNm("폐암");
                detectionLungluad.setDetailDesc1(jsonNode.get("lungluad_detail_desc1").asText(""));
                detectionLungluad.setDetailDesc2(jsonNode.get("lungluad_detail_desc2").asText(""));
                detectionLungluad.setDetailDescLevel(jsonNode.get("lungluad_detail_desc_level").asText(""));
                detectionLungluad.setDetailDescScore(jsonNode.get("lungluad_detail_desc_score").asText(""));
                detectionLungluad.setDetailDescLevelInfo(jsonNode.get("lungluad_detail_desc_level_info").asText(""));
                detectionLungluad.setDetailCompareDesc1(jsonNode.get("lungluad_detail_compare_desc1").asText(""));
                detectionLungluad.setDetailCompareDescDistance(jsonNode.get("lungluad_detail_compare_desc_distance").asText(""));
                detectionLungluad.setDistanceLevelName(jsonNode.get("lungluad_distance_level_name").asText(""));
                detectionLungluad.setFileSortSn1(2801);
                detectionLungluad.setFileSortSn2(2802);
                analysisResultDiseaseDetectionVer2List.add(detectionLungluad);
            }
        }
        return analysisResultVer2;
    }

}